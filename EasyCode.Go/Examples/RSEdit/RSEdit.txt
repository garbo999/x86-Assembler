The RS Edit dll is a complete ANSI text editor than, of course, can be improved. A simple
call to the 'rsCreateEditor' function will create a complete editor for you. To destroy
the editor, just call the 'DestroyWindow' API function  with the handle of the editor
(returned by 'rsCreateEditor'). The RS Edit project has been made in assembly (MASM32)
and, even I made programs in the DOS old times, this is my first Win32 asm program. I
think it is very indicated for syntax highlighting editors. Anyway, you have the full
source code to adapt it to your needs and, please, feel free to use it at your convenience.
If you add/modify anything, I would be very greatful if you send me the new/modified
code to one of the email addresses listed below. Please, report any bugs and they will
be fixed as soon as possible. If you report bugs I will send you the new corrected
version.

This Dll editor has been programmed using a real visual assembly IDE for RAD applications
that I've developed. Its name is Easy Code and it is available for free at:

                             http://www.easycode.cat


The RS Edit editor:

- Up to 2 GB files
- Full keyboard management (Home, End, Left, Right, Up, Down Keys, etc.)
- Selection bar (you can change the width and color)
- Backcolor and text color can be chosen by user
- Selected text backcolor and text color can be chosen by user
- Bitmapped window painting (no flicker)
- Complete search functions (up, down, match case, whole word) at high speed.
- Painting procedure can be subclassed by the user so he/her has editor.
- Painting and find procedures can be subclassed and processed by the main
  application. So, you decide which characters are part of a word, and you
  can modified colors for diferent lines and draw text at your own.


======================================================================================
To build the RSEdit.dll, you will need the Easy Code assembly IDE. You can download it
for free at:

                             http://www.easycode.cat


At the moment, the project is already built in the 'Release' folder
======================================================================================


Thank you very much and enjoy this dll editor.


Programmed by Ramon Sala - 2003-2008


Please visit my web:  http://www.easycode.cat


EMails:

asm@easycode.cat
rsala@easycode.cat



;========================================================================================
; Usage of the RS Edit editor
;========================================================================================

To use the editor, the RSEdit.dll file must be in the Windows\System directory
(WINNT\System32 in Windows NT40/2000). Your program must include the RSEdit.lib
file (generated by the linker if you specify /DLL when creating this dll) so that
it can comunicate with the dll. Also, you have to include the following prototype
(declaration) in your application:

rsCreateEditor	Proto	:HWND, :DWord, :DWord, :LONG, :LONG, :LONG, :LONG


From the main window of your application, call the 'rsCreateEditor' function. It
will return a handle to new created editor. To call the 'rsCreateEditor' function
you must supply the following parameters:


1 - hwndParent:	The handle of the parent window (the window containing the editor).
2 - dwStyle:	The window style (refer to Windows styles).
3 - dwExStyle:	The window extended style (refer to Windows extendend styles).
4 - lLeft:	The left position of the editor (in pixels).
5 - lTop:	The top position of the editor (in pixels).
6 - lWidth:	The width of the editor (in pixels).
7 - lHeight:	The height of the editor (in pixels).


After creating the editor, you can start working with it by sending messages to the
handle returned by 'rsCreateEditor'. All needed information is listed below.


- To change the font, create a font and set it throug a WM_SETFONT message. Before
  doing that, in order to be polite and not leave resources which will remain in
  the system, you should retreive the current font (WM_GETFONT message) and then
  delete the returned value (the current editor's font) with 'DeleteObject'.

- To set text into the editor, you should send the WM_SETTEXT message with a pointer
  to the new text in the lParam parameter. When you do that, the undo buffer is cleared
  (all undo / redo operations are lost).

- To retreive the length of the text inside the editor, you should send the
  WM_GETTEXTLENGTH message. The returned value does not include the final zero.

- To work with edition functions, use WM_UNDO, WM_COPY, WM_PASTE, WM_CUT, WM_CANUNDO,
  and WM_CANPASTE messages, plus the RSM_REDO and RSM_CANREDO messages.

- When there is no text in the editor, the number of rows (lines) is 1 (which
  is the line where the caret is) and its line number is 0.

- The RSEdit editor, notifies its parent, through WM_NOTIFY message the following
  events:

		EN_SELCHANGE		;Selection changed
		NM_RETURN		;Return key has been pressed
		NM_CLICK		;A click (left mouse button) has been done
		NM_DBLCLK		;A double click (left mouse button) has been done
		NM_RCLICK		;A click (right mouse button) has been done
		NM_RDBLCLK		;A double click (right mouse button) has been done



  and through the WM_COMMAND message the following events:

		EN_CHANGE		;Text has been modified (after updating the editor)
		EN_KILLFOCUS		;editor has lost the focus
		EN_SETFOCUS		;editor has received the focus
		EN_UPDATE		;Text has been modified (before updating the editor)



- If you're going to work with the RSEdit.dll, define the prototype for 'rsCreateEditor'
  (as mentioned early) and the following constants, events and structures (that's all
  you need in order to communicate with the editor):


;===========================================================================
; RS Edit constants
;===========================================================================

RSC_PREV			Equ		1
RSC_NEXT			Equ		2

RSC_UP				Equ		0
RSC_DOWN			Equ		1
RSC_MATCHCASE			Equ		2
RSC_WHOLEWORD			Equ		4


;===========================================================================
; RS Edit event mask
;===========================================================================

EV_CHANGE			Equ		00000001H
EV_HSCROLL			Equ		00000002H
EV_UPDATE			Equ		00000004H
EV_VSCROLL			Equ		00000008H
EV_SELCHANGE			Equ		00000010H


;===========================================================================
; RS Edit messages
;===========================================================================

RSM_CANPASTE			Equ		WM_USER + 101
RSM_CANREDO			Equ		WM_USER + 102
RSM_CANUNDO			Equ		WM_USER + 103
RSM_CLEARUNDOBUFFER		Equ		WM_USER + 104
RSM_FINDWORD			Equ		WM_USER + 105
RSM_FINDTEXT			Equ		WM_USER + 106
RSM_GETBACKCOLOR		Equ		WM_USER + 107
RSM_GETEVENTMASK		Equ		WM_USER + 108
RSM_GETFIRSTVISIBLELINE 	Equ		WM_USER + 109
RSM_GETHANDLE			Equ		WM_USER + 110
RSM_GETHIDESELECTION		Equ 		WM_USER + 111
RSM_GETLINE			Equ		WM_USER + 112
RSM_GETLINECOUNT		Equ		WM_USER + 113
RSM_GETLINEFROMCHAR		Equ		WM_USER + 114
RSM_GETLINEINDEX		Equ		WM_USER + 115
RSM_GETLINELENGTH		Equ		WM_USER + 116
RSM_GETMODIFY			Equ		WM_USER + 117
RSM_GETPOSITION			Equ		WM_USER + 118
RSM_GETSELBACKCOLOR		Equ		WM_USER + 119
RSM_GETMARGINCOLOR		Equ		WM_USER + 120
RSM_GETMARGINWIDTH		Equ		WM_USER + 121
RSM_GETSELECTION		Equ		WM_USER + 122
RSM_GETSELTEXT			Equ		WM_USER + 123
RSM_GETSELTEXTCOLOR		Equ		WM_USER + 124
RSM_GETTEXTCOLOR		Equ		WM_USER + 125
RSM_EDITORSCROLL		Equ		WM_USER + 126
RSM_REDO			Equ		WM_USER + 127
RSM_REPLACESEL			Equ		WM_USER + 128
RSM_SETAUTOINDENT		Equ		WM_USER + 129
RSM_SETBACKCOLOR		Equ		WM_USER + 130
RSM_SETCARETWIDTH		Equ 		WM_USER + 131
RSM_SETEVENTMASK		Equ		WM_USER + 132
RSM_SETFINDPROC			Equ		WM_USER + 133
RSM_SETHIDESELECTION		Equ 		WM_USER + 134
RSM_SETHSCROLLBAR		Equ 		WM_USER + 135
RSM_SETMODIFY			Equ		WM_USER + 136
RSM_SETPAINTPROC		Equ		WM_USER + 137
RSM_SETREADONLY 		Equ		WM_USER + 138
RSM_SETSELBACKCOLOR		Equ		WM_USER + 139
RSM_SETMARGINCOLOR		Equ		WM_USER + 140
RSM_SETMARGINWIDTH		Equ		WM_USER + 141
RSM_SETSELECTION		Equ		WM_USER + 142
RSM_SETSELTEXTCOLOR		Equ		WM_USER + 143
RSM_SETTABSTOPS 		Equ		WM_USER + 144
RSM_SETTEXTCOLOR		Equ		WM_USER + 145
RSM_SETUNDOLIMIT		Equ		WM_USER + 146
RSM_SETVSCROLLBAR		Equ 		WM_USER + 147


;===========================================================================
; RS Edit structures
;===========================================================================

RSSCHARSEL 			Struct
					lMin	LONG		?
					lMax	LONG		?
RSSCHARSEL 			EndS

RSSSELCHANGED			Struct
					nmhdr	NMHDR		<?>
					chr	RSSCHARSEL 	<?>
					ptPos	POINTL		<?>
RSSSELCHANGED			EndS


RSSFINDTEXT			Struct
					chr	RSSCHARSEL	<?>
					lpstr	LPSTR		?
RSSFINDTEXT			EndS




- Communication with the editor is made through Windows messages, by passing or
  receiving information in the two parameters (wParam and lParam) of a message.
  The available messages are the following:


;========================================
; RSM_CANPASTE Message
;========================================

Specifies whether a paste operation can be done or not.

Sintax:		Invoke SendMessage, hwndEdit, RSM_CANPASTE, 0, 0

Returns:	TRUE  = If there is some text to paste
		FALSE = If not


;========================================
; RSM_CANREDO Message
;========================================

Specifies whether a redo operation can be done or not.

Sintax:		Invoke SendMessage, hwndEdit, RSM_CANREDO, 0, 0

Returns:	TRUE  = If there is any redo operation
		FALSE = If not


;========================================
; RSM_CANUNDO Message
;========================================

Specifies whether an undo operation can be done or not.

Sintax:		Invoke SendMessage, hwndEdit, RSM_CANUNDO, 0, 0

Returns:	TRUE  = If there is any undo operation
		FALSE = If not


;========================================
; RSM_CLEARUNDOBUFFER Message
;========================================

Clears (resets) all entrys in the undo/redo buffer.

Sintax:		Invoke SendMessage, hwndEdit, RSM_CLEARUNDOBUFFER, 0, 0

Returns: 	Nothing


;========================================
; RSM_FINDWORD Message
;========================================

Finds the previous or next word from the current insertion point and
moves the caret to the beginning of that word.

Sintax:		Invoke SendMessage, hwndEdit, RSM_FINDWORD, wDirection, 0

Parameter:	wDirection = Indicates the previous or next word according
			     to the following values:
		             RSC_PREV = The previous word is found.
			     RSC_NEXT = The next word is found.

Returns: 	The character index of the word.


;========================================
; RSM_FINDTEXT Message
;========================================

Finds text along the whole editor's text.

Sintax:		Invoke SendMessage, hwndEdit, RSM_FINDTEXT, wFlags, lpFt

Parameter:	wFlags = Indicates the way in what text is searched for. It
                         can be one (or a combination) of the following values:
                         RSC_UP   	= Text is searched from bottom to top.
		         RSC_DOWN 	= Text is searched from top to bottom.
			 RSC_MATCHCASE  = Search is case sensitive.
			 RSC_WHOLEWORD  = A whole word is searched.
		
		lpFt   = The address of an RSC_FINDTEXT structure, filled with
			 the desired values.

			 Members: lpFt.chr.lMin = Index of the character where
				  to begin search (if -1, searches from the
				  beginning).
		
            			  lpFt.chr.lMax = Index of the character where
				  to end search (if -1, searches up to the end).

				  lpFt.lpstr = Text to search.

Returns: 	The character index of the text, or -1 if not found.

Remarks:	When searching text up (from bottom to top), the lpFt.chr.lMin
		and lpFt.chr.lMax members are interpreted in a reverse order. For
		instance, to search from position 10000 to 0, lpFt.chr.lMin should
		be set 10000 and lpFt.chr.lMax should be set to 0.


;========================================
; RSM_GETBACKCOLOR Message
;========================================

Gets the editor's backcolor (not selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETBACKCOLOR, 0, 0

Returns:	Value of the new color (from 0 to 00FFFFFFh). For
		system colors, the two first digits must be 80H,
		that is, 80000005H means the system color 5 (which
		is COLOR_WINDOW).


;========================================
; RSM_GETEVENTMASK Message
;========================================

Gets the editor's event mask. When an event is fired, the parent of the editor
receives the event throug the WM_COMMAND or WM_NOTIFY messages.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETEVENTMASK, 0, 0

Returns: 	The events that are active inside the editor. They can be one,
		or a combination, of the following values:
		EV_CHANGE    = Fires EN_CHANGE when text changes.
		EV_HSCROLL   = Fires EN_HSCROLL when the editor is scrolled horizontally.
		EV_UPDATE    = Fires EN_UPDATE when the editor is goingto be updated.
		EV_VSCROLL   = Fires EN_VSCROLL when the editor is scrolled vertically.
		EV_SELCHANGE = Fires EN_SELCHANGE when the selection (the caret or
					   insertion point) changes.
		
Remarks:	EV_CHANGE, EV_UPDATE, EV_HSCROLL and EV_VSCROLL fire, respectively,
		the EN_CHANGE, EN_UPDATE, EN_HSCROLL and EN_VSCROLL messages which
		are received by the parent window through WM_COMMAND messages (see
		Windows help for WM_COMMAND message), while EV_SELCHANGE fires the
		EN_SELCHANGE message that is received through a WM_NOTIFY command.
		For that WM_NOTIFY message, wParam will contain the code number which
		fired the event, while lParam will be the address of an RSSSELCHANGED
		structure.



;========================================
; RSM_GETFIRSTVISIBLELINE Message
;========================================

Gets the first visible line (zero based) inside the editor.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETFIRSTVISIBLELINE, 0, 0

Returns: 	The zero based number of the line which is the first visible.
		


;========================================
; RSM_GETHANDLE Message
;========================================

Gets the memory pointer where text is stored.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETHANDLE, 0, 0

Returns: 	The memory pointer of the text. It can be used to speed up
		reading operations.
		
Remarks: 	All lines are stored in memory with the CR+LF (ASCII values
		13 and 10) characters at the end of each line. You sould not
		write directly to that pointer, nor delete it, but you can
		read lines more quickly. Also, yo can retrieve this pointer
		to save the text to disk.



;========================================
; RSM_GETHIDESELECTION Message
;========================================

Returns the hide selection flag (whether selected text is going to be
painted or not).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETHIDESELECTION, 0, 0

Returns: 	TRUE  = Hide selection is active (selected text is not painted).
		FALSE = Hide selection is not active (selected text is painted).



;========================================
; RSM_GETLINE Message
;========================================

Gets the contents of the specified line.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETLINE, wLineNumber, lpszBuf

Parameters:	wLineNumber = The zero based line number to be retreived.
		lpszBuf     = Address of a buffer to receive the text.

Returns: 	The number of characters copied to the buffer.
		
Remarks:	The line includes the CR (value 13) character of the end of the
		line, but not the LF (value 10) character.



;========================================
; RSM_GETLINECOUNT Message
;========================================

Gets the number of text lines in the editor.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETLINECOUNT, 0, 0

Returns: 	The number of existing lines. You can refer to those lines
		from 0 to returned value - 1.
		


;========================================
; RSM_GETLINEFROMCHAR Message
;========================================

Gets the zero based line number for a given character.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETLINEFROMCHAR, 0, lCharIndex

Parameters:	wCharIndex = The zero based index of a character.

Returns: 	The line number where the specified character belongs to.

Remarks:	If you specify a character index out of the text limits, the return
		value will be 0 or the last character.
		


;========================================
; RSM_GETLINEINDEX Message
;========================================

Gets the index of the first character in the specified line.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETLINEINDEX, wLineNumer, 0

Parameters:	wLineNumber = The zero based line number whose index is to be
			      retreived.

Returns: 	The zero based character index of the first character in the line.
		
Remarks:	The return value will be -1 if you specify a line number which do
		not exists.
Remarks:	If you specify a non existing line number, the return value will
		be 0 or the last line -1.


;========================================
; RSM_GETLINELENGTH Message
;========================================

Gets the length of the the specified line.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETLINELENGTH, wLineNumber, 0

Parameters:	wLineNumber = The zero based line number whose length is to be
			      retreived.

Returns: 	The length of the specified line.

Remarks:	The length includes the CR character of the end of the line but
		not the LF character, so a line always have, at least, one character.
		If you especify an unexisting line, the returned value will be 0.



;========================================
; RSM_GETMODIFY Message
;========================================

Gets the state of modified text flag.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETMODIFY, 0, 0

Returns:	TRUE  = If text has been modified
		FALSE = If not
		
Remarks;	You are responsible for setting the modified flag to FALSE when
		your application saves the text to disk (see: RSM_SETMODIFY
		message).



;========================================
; RSM_GETPOSITION Message
;========================================

Gets the minimum and maximum position of the selected text.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETPOSITION, lpCol, lpRow

Parameters:	lpCol = Address of a LONG variable to receive the column number
		lpRow = Address of a LONG variable to receive the row (or line)

Returns: 	The column and row numbers in the specified variables.

Remarks:	If lpCol or lpRow (or both) are NULL, no value is specified
		for that variable. The returned value for the column number,
		is the real column, that is, with tabs expanded (it may be not
		the same than the column in the editors' memory). With that
		message you can display the Col and Line numbers in your app.



;========================================
; RSM_GETSELBACKCOLOR Message
;========================================

Gets the selected text's backcolor (the backcolor for selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETSELBACKCOLOR, 0, 0

Returns:	Value of the new color (from 0 to 00FFFFFFh). For
		system colors, the two first digits must be 80H,
		that is, 80000005H means the system color 5 (which
		is COLOR_WINDOW).



;========================================
; RSM_GETMARGINCOLOR Message
;========================================

Gets the color for the selection bar (on the left part of the editor).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETMARGINCOLOR, 0, 0

Returns:	Value of the new color (from 0 to 00FFFFFFh). For
		system colors, the two first digits must be 80H,
		that is, 80000005H means the system color 5 (which
		is COLOR_WINDOW).



;========================================
; RSM_GETMARGINWIDTH Message
;========================================

Gets the width (in pixels) of the selection bar (on the left part of the
editor).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETMARGINWIDTH, 0, 0

Returns: 	The width in pixels of the selection bar.

Remarks:	When working with twips (Visual Basic), take into account that
		12 twips = 1 pixel (large fonts) and 15 twips = 1 pixel (small fonts).


;========================================
; RSM_GETSELECTION Message
;========================================

Gets the minimum and maximum positions of the selected text.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETSELECTION, lpMin, lpMax

Parameters:	lpMin = Address of a LONG variable to receive the minimum
			position (character index).
		lpMax = Address of a LONG variable to receive the maximum
			position (character index).

Returns: 	The minimum and maximum positions in the specified variables.

Remarks:	If lpMin or lpMax (or both) are NULL, no value is specified
		for that variable. When there is no selection, lpMin and lpMax
		(if not NULL) are filled with the same value: the character
		index of the caret (insertion point).



;========================================
; RSM_GETSELTEXT Message
;========================================

Gets the text which is currently selected.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETSELTEXT, 0, lpszBuf

Parameters:	lpszBuf = Address of a buffer to receive the selected text.

Returns: 	The number of characters copied to the buffer.

Remarks:	If no text is selected, no text is copied an the return value
		is zero. The selected text length, is the maximum position
		minus the minimum position.



;========================================
; RSM_GETSELTEXTCOLOR Message
;========================================

Gets the foreground color (color of text) of selected text.

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETSELTEXTCOLOR, 0, 0

Returns:	Value of the new color (from 0 to 00FFFFFFh). For
		system colors, the two first digits must be 80H,
		that is, 80000005H means the system color 5 (which
		is COLOR_WINDOW).



;========================================
; RSM_GETTEXTCOLOR Message
;========================================

Gets the foreground color (color of text) of the editor (not selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_GETTEXTCOLOR, 0, 0

Returns:	Value of the new color (from 0 to 00FFFFFFh). For
		system colors, the two first digits must be 80H,
		that is, 80000005H means the system color 5 (which
		is COLOR_WINDOW).



;========================================
; RSM_EDITORSCROLL Message
;========================================

Scrolls horizontally and vertically the specified number of columns/lines.

Sintax:		Invoke SendMessage, hwndEdit, RSM_EDITORSCROLL, lCols, lLines

Parameters:	lCols  = Number of columns to scroll horizontally.
		lLines = Number of lines to scroll vetically.

Returns: 	Nothing.

Remarks:	To scroll left or up, specify negative values.



;========================================
; RSM_REDO Message
;========================================

Performs a redo operation

Sintax:		Invoke SendMessage, hwndEdit, RSM_REDO, 0, 0

Returns: 	TRUE if a redo operation was performed or FALSE if not.

Remarks:	To know if text can be redone, refer to RSM_CANREDO message.



;========================================
; RSM_REPLACESEL Message
;========================================

Replaces the selected text (if any) or inserts the specified text in the
insertion point when no text i selected.

Sintax:		Invoke SendMessage, hwndEdit, RSM_REPLACESEL, 0, lpszBuf

Parameters:	lpszBuf = Address of the buffer of text to be inserted.

Returns: 	Nothing.

Remarks:	Use this message to add/insert text into the editor. If there
		is text selected, it will be replaced by the text specified in
		the 'lpszbuf' parameter. If no text is selected, the text will
		be inserted where the caret (insertion point) is. So, if you
		want to add new text, set selection to the end of the editor
		and send this message (see: RSM_SETSELECTION).



;========================================
; RSM_SETAUTOINDENT Message
;========================================

Sets the auto indent mode.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETAUTOINDENT, wAuto, 0

Parameters:	wAuto = Variable specifying whether auto indent should be active.
			TRUE  = Auto indent mode is active.
			False = Auto indent mode is not active.

Returns: 	Nothing.



;========================================
; RSM_SETBACKCOLOR Message
;========================================

Sets the editor's backcolor for text (not selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETBACKCOLOR, 0, lColor

Parameters:	lColor = Value of the new color (from 0 to 00FFFFFFh). For
			 system colors, the two first digits must be 80H,
			 that is, 80000005H means the system color 5 (which
			 is COLOR_WINDOW).

Returns: 	Nothing.



;========================================
; RSM_SETCARETWIDTH Message
;========================================

Sets the carets's width (in pixels).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETCARETWIDTH, 0, lWidth

Parameters:	lWidth = Value of the new width of the caret (in pixels).

Remarks:	The width of the caret must be a value betwen 1 and 4. Any
		other value is ignored.



;========================================
; RSM_SETEVENTMASK Message
;========================================

Sets the editor's event mask. When an event is fired, the parent of the editor
receives the event through the WM_COMMAND or WM_NOTIFY messages.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETEVENTMASK, 0, lMask

Parameters:	lMask = Value of the event mask (events that will be fired). It
			can beone, or a combination, of the following values:

		EV_CHANGE    = Fires EN_SELCHANGE when text changes.
		EV_HSCROLL   = Fires EN_HSCROLL when the editor is scrolled horizontally.
		EV_UPDATE    = Fires EN_UPDATE when the editor is going to be updated.
		EV_VSCROLL   = Fires EN_VSCROLL when the editor is scrolled vertically.
		EV_SELCHANGE = Fires EN_SELCHANGE when the selection (insertion point) changes.
		
Returns:	Nothing.

Remarks:	EV_CHANGE, EV_UPDATE, EV_HSCROLL and EV_VSCROLL fire, respectively,
		the EN_CHANGE, EN_UPDATE, EN_HSCROLL and EN_VSCROLL messages which
		are received by the parent window through WM_COMMAND messages (see
		Windows help for WM_COMMAND message), while EV_SELCHANGE fires the
		EN_SELCHANGE message that is received through a WM_NOTIFY command.
		For that WM_NOTIFY message, wParam will contain the code number which
		fired the event, while lParam will be the address of an RSSSELCHANGED
		structure.



;========================================
; RSM_SETFINDPROC Message
;========================================

Sets the address of the procedure that will be called for each caracter to be
searched or compared.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETFINDPROC, 0, lpNewProc

Parameters:	lpNewProc = Address of the new procedure.
		
Returns:	The addres of the editor's original procedure.

Remarks:	Use this message to let your application editor characters that
		are searched or compared. The default FindProc is:
		
		ProcName	Proc chr:CHAR
				Return FALSE
		ProcName	EndP

		You should return TRUE for the character in 'chr' to be treated
		like part of a word (for instance: '_' or '@'), and FALSE for the
		character in 'chr' to be treated like the end of a word (word break).
		Be careful: if you return always TRUE, the whole text will be treated
		like a word. To return the find procedure to its original address,
		you must send this message, setting the 'lpNewProc' parameter to NULL.



;========================================
; RSM_SETHIDESELECTION Message
;========================================

Specifies whether selected text is going to be painted or not.

Sintax:		Invoke SendMessage, hwndEdit, RSM_HIDESELECTION, wHide, 0

Parameters:	wHide = Variable specifying whether selected text is painted.
			TRUE  = Selected text is painted.
			FALSE = Selected text is not painted.

Returns: 	Nothing.




;========================================
; RSM_SETHSCROLLBAR Message
;========================================

Sets or removes the editors' horizontal scroll bar.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETHSCROLLBAR, wHScroll, 0

Parameters:	wHScroll = Horizontal scroll bar.
			 TRUE  = Adds a horizontal scroll bar.
			 FALSE = Removes the horizontal scroll bar.

Returns:	Nothing.




;========================================
; RSM_SETMODIFY Message
;========================================

Sets the state of modified text flag.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETMODIFY, wState, 0

Parameters:	wState = State of the modified flag.
			 TRUE  = Text has been modified (set internally by
				 the editor).
			 FALSE = Text is not modified (set by the main app
				 when text is saved to disk).

Returns:	Nothing.
		


;========================================
; RSM_SETPAINTPROC Message
;========================================

Sets the address of the procedure that will be called for painting the editor.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETPAINTPROC, 0, lpNewProc

Parameters:	lpNewProc = Address of the new procedure.
		
Returns:	The addres of the editor's original procedure.

Remarks:	Use this message to let your application to paint the editor
		background and text. The PaintProc must be:
		
		PaintProc	Proc ps:DWord
				
		PaintProc	EndP

		Where 'ps' is the address of a PAINTSTRUCT structure containing
		all values needed for painting ('ps.hdc' is the device context,
		while 'ps.rcPaint' is the rectangle needing to be updated). To
		return the paint procedure to its original address, you sholud
		send this message, setting the 'lpNewProc' parameter to NULL.




;========================================
; RSM_SETREADONLY Message
;========================================

Specifies whether text in the editor is read-only.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETREADONLY, wReadOnly, 0

Parameters:	wReadOnly = Variable specifying whether text is read-only.
			    TRUE  = Text is read-only.
			    FALSE = Text is read/write.

Returns: 	Nothing.

Remarks:	When read-only mode is set to TRUE, the caret (insertion point)
		disapears.



;========================================
; RSM_SETSELBACKCOLOR Message
;========================================

Sets the selection text's backcolor (selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETSELBACKCOLOR, 0, lColor

Parameters:	lColor = Value of the new color (from 0 to 00FFFFFFh). For
			 system colors, the two first digits must be 80H,
			 that is, 80000005H means the system color 5 (which
			 is COLOR_WINDOW).

Returns: 	Nothing.



;========================================
; RSM_SETMARGINCOLOR Message
;========================================

Sets the color of the selection bar (on the left of the editor).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETMARGINCOLOR, 0, lColor

Parameters:	lColor = Value of the new color (from 0 to 00FFFFFFh). For
			 system colors, the two first digits must be 80H,
			 that is, 80000005H means the system color 5 (which
			 is COLOR_WINDOW).

Returns: 	Nothing.



;========================================
; RSM_SETMARGINWIDTH Message
;========================================

Sets the width (in pixels) of the selection bar (on the left of the editor).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETMARGINWIDTH, 0, lNewWidth

Parameters:	lNewWidth = New width (in pixels) of the selection bar.

Returns: 	Nothing.

Remarks:	For no selection bar, set the 'lNewWidth' parameter to 0.



;========================================
; RSM_SETSELECTION Message
;========================================

Sets the new selected text positions (character index).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETSELECTION, wMin, lMax

Parameters:	wMin = Value of the minimum position.
		lMax = Value of the maximum position.

Returns: 	Nothing.



;========================================
; RSM_SETSELTEXTCOLOR Message
;========================================

Sets the selection text's foreground (color of selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETSELTEXTCOLOR, 0, lColor

Parameters:	lColor = Value of the new color (from 0 to 00FFFFFFh). For
			 system colors, the two first digits must be 80H,
			 that is, 80000005H means the system color 5 (which
			 is COLOR_WINDOW).

Returns: 	Nothing.



;========================================
; RSM_SETTABSTOPS Message
;========================================

Sets the number of spaces for a TAB key.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETTABSTOPS, wSpaces, 0

Parameters:	wSpaces = Number of spaces for a tab. It must be a value
			  between 1 and 16.

Returns: 	Nothing.



;========================================
; RSM_SETTEXTCOLOR Message
;========================================

Sets the text's color (color of not selected text).

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETTEXTCOLOR, 0, lColor

Parameters:	lColor = Value of the new color (from 0 to 00FFFFFFh). For
			 system colors, the two first digits must be 80H,
			 that is, 80000005H means the system color 5 (which
			 is COLOR_WINDOW).

Returns: 	Nothing.



;========================================
; RSM_SETUNDOLIMIT Message
;========================================

Sets the number of operations that can be undone.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETUNDOLIMIT, wNumber, 0

Parameters:	wNumber = Number of undo operations.

Returns: 	Nothing.

Remarks:	Parameter 'wNumber' must be a number between 0 and 65535. When
		0, it means no undo buffer exists. When the editor is created,
		the number of undo operations is 100. You can increase that value
		up to 2147483647, but you have to be careful about the system memory.
		A number between 100-200 is usually quite good.




;========================================
; RSM_SETVSCROLLBAR Message
;========================================

Sets or removes the editors' vertical scroll bar.

Sintax:		Invoke SendMessage, hwndEdit, RSM_SETVSCROLLBAR, wVScroll, 0

Parameters:	wVScroll = Vertical scroll bar.
			 TRUE  = Adds a vertical scroll bar.
			 FALSE = Removes the vertical scroll bar.

Returns:	Nothing.





Thanks and enjoy it!
